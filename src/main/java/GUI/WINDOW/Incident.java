/**
 * Projekt do předmětu PDB (2016/2017) - Prostorové, multimediální a temporální 
 * databáze: Metro Accident Databse
 * Autoři: Petr Staněk (xstane34), 
           František Matečný (xmatec00),
           Jakub Stejskal (xstejs24)
 * Datum:  12.12.2016
 * Verze:  1.0
 */
package GUI.WINDOW;

import GUI.WINDOW.ShowImage;
import GUI.MYOBJECTS.DateLabelFormatter;
import LOGIC.FILECHOOSER.ImageFilter;
import GUI.MYOBJECTS.MyComboBox;
import GUI.TABS.Search;
import LOGIC.Incident.TIncident;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;
import oracle.ord.im.OrdImage;
import org.jdatepicker.impl.SqlDateModel;
import java.util.Properties;
import javax.swing.JPanel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Třída vytvářející okno pro vytvoření nebo modifikaci informací o incidentu.
 * @author petr
 */
public class Incident extends javax.swing.JDialog {
	private boolean isEditMode; // příznak aktualizačního režimu okna
	private int incidentID;  // id incidentu z DB, v insert režimu nenastaveno
	private Search parent; // reference na rodiče modálního okna
	private JDatePickerImpl datePicker; // prvek pro výběr data
	private TIncident tIncident; // struktura hodnot formuláře
	private Vector<File> bufferToDB = new Vector<>(); // buffer obrázků pro uložení do DB

	/**
	 * Konstruktor okna pro vložení/editaci incidentu.
	 * @param parent rodič modálního okna
	 * @param modal příznak zapnutí režimu modality
	 */
	public Incident(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		// Spatial.loadObjectFromDb();
                stationActionPerformed(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jBtnSave = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        sex = new javax.swing.JComboBox<>();
        age = new javax.swing.JSpinner();
        injury = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        event = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        date = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        station = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        delay = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        reason = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jLabel27 = new javax.swing.JLabel();
        jScrollFotos = new javax.swing.JScrollPane();
        jPFotos = new javax.swing.JPanel();
        jBtnUploadImg = new javax.swing.JButton();
        jBtnDelIncident = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        mapSearchViewer1 = new GUI.PANELS.MapSearchViewer();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModal(true);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(720, 500));

        jBtnSave.setText("Uložit údaje");
        jBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSaveActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabel8.setText("Vložení/úprava incidentu");

        jLabel15.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel15.setText("Evidenční číslo");

        id.setEditable(false);
        id.setForeground(new java.awt.Color(204, 204, 255));
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel22.setText("Pohlaví");

        jLabel23.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel23.setText("Věk");

        sex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "muž", "žena" }));

        age.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        injury.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bez zranění", "lehké", "těžké", "smrt" }));

        jLabel24.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel24.setText("Zranění");

        event.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pád osoby do kolejiště", "Srážka s osobou", "Zachycení osoby soupravou", "Zaběhnuté zvíře", "Uvíznutí osoby" }));

        jLabel20.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel20.setText("Událost");

        date.setMaximumSize(new java.awt.Dimension(120, 2147483647));
        date.setPreferredSize(new java.awt.Dimension(205, 0));
        date.setLayout(new java.awt.BorderLayout());

        jLabel16.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel16.setText("Datum a čas");

        jLabel17.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel17.setText("Stanice");

        station.setModel(GUI.MYOBJECTS.MyComboBox.getCombo(DB.Queries.ComboBox.getStations(false)));
        station.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stationActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel21.setText("Zpoždění/výluka (min)");

        delay.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel25.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel25.setText("Příčina");

        reason.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "neopatrnost", "pokus o sebevraždu", "upadnutí předmětu do kolejiště" }));

        jLabel26.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel26.setText("Popis události");

        description.setColumns(20);
        description.setRows(5);
        jScrollPane3.setViewportView(description);

        jLabel27.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel27.setText("Fotografie");

        jPFotos.setLayout(new java.awt.GridLayout(0, 3, 5, 5));
        jScrollFotos.setViewportView(jPFotos);

        jBtnUploadImg.setText("Přidat fotografie");
        jBtnUploadImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnUploadImgActionPerformed(evt);
            }
        });

        jBtnDelIncident.setText("Smazat incident");
        jBtnDelIncident.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnDelIncidentActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout mapSearchViewer1Layout = new javax.swing.GroupLayout(mapSearchViewer1);
        mapSearchViewer1.setLayout(mapSearchViewer1Layout);
        mapSearchViewer1Layout.setHorizontalGroup(
            mapSearchViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        mapSearchViewer1Layout.setVerticalGroup(
            mapSearchViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mapSearchViewer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(mapSearchViewer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText("Mapa");

        SqlDateModel model1 = new SqlDateModel();
        Properties p1 = new Properties();
        p1.put("text.today", "Today");
        p1.put("text.month", "Month");
        p1.put("text.year", "Year");
        JDatePanelImpl datePanel1 = new JDatePanelImpl(model1, p1);
        datePicker = new JDatePickerImpl(datePanel1, new DateLabelFormatter());
        date.add(datePicker);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBtnDelIncident)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnSave))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollFotos)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel21)
                                        .addComponent(jLabel15)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(delay, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel22))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel23)
                                                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(21, 21, 21)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel20)
                                        .addComponent(jLabel16)
                                        .addComponent(jLabel24)
                                        .addComponent(event, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(injury, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(56, 56, 56)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel17)
                                        .addComponent(jLabel25)
                                        .addComponent(station, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reason, 0, 200, Short.MAX_VALUE)))
                                .addComponent(jLabel26)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel27)
                                .addComponent(jBtnUploadImg)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(20, 20, 20))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(station, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(event, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(injury, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollFotos, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBtnUploadImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnSave)
                    .addComponent(jBtnDelIncident))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Reaguje smazáním obrázku s daným ID z databáze po kliknutí na tlačítko.
	 * @param imgID id obrázku z databáze
	 */
	private void jDeleteDBImgActionPerformed(int imgID) { 
		DB.Queries.Incident.deleteImageFromDB(imgID);
		setThumbnailsPanel(); // aktualizuje panel náhledů
	}
	
	/**
	 * Reaguje smazáním obrázku s daným ID z fronty pro uložení do DB po 
	 * kliknutí na tlačítko.
	 * @param imgID index obrázku ve frontě
	 */
	private void jDeleteVectImgActionPerformed(int imgID) { 
		bufferToDB.remove(imgID);
		setThumbnailsPanel();  // aktualizuje panel náhledů		
	}
	
	/**
	 * Reaguje rotací obrázku dle jeho id v databázi po kliknutí na tlačítko.
	 * @param imgID id obrázku z databáze 
	 */
	private void jRotateDBImgActionPerformed(int imgID) {
		DB.Queries.Incident.rotateImageFromDB(imgID);
		setThumbnailsPanel();  // aktualizuje panel náhledů
	}
	
	/**
	 * Reaguje vyhledáním podobných obrázků v DB k obrázku se zadaným id 
	 * po kliknutí na tlačítko.
	 * @param imgID id obrázku z databáze 
	 */
	private void jSimilImgsActionPerformed(int imgID) {
		// vytvoření a zobrazení okna s podobnými obrázky
		SimilarImages si = new SimilarImages(this, true);
		si.setSimilarTo(imgID, parent);
		si.setVisible(true);
	}
	
	/**
	 * Zobrazí ve velkém okně obrázek předaný parametrem.
	 * @param srcImage zobrazovaný obrázek
	 */
	private void jBtnShowImgClickPerformed(ImageIcon srcImage) 
	{
		// vytvoření a zobrazení okna s velkým náhledem obrázku
		ShowImage shImg = new ShowImage(this, true);
		shImg.showImage(srcImage);
		shImg.setVisible(true);
	}
	
	/**
	 * Provede uložení obsahů formulářů a obrázků do databáze.
	 * @param evt předaná událost
	 */
    private void jBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSaveActionPerformed
		tIncident.I_dateFrom = datePicker.getJFormattedTextField().getText();
		tIncident.I_stanice = ((MyComboBox)station.getSelectedItem()).getValue();  
		tIncident.I_vek = Integer.parseInt(age.getValue().toString());
		tIncident.I_zpozdeni = Integer.parseInt(delay.getValue().toString());
		tIncident.I_popis = description.getText();
		tIncident.I_udalost = event.getSelectedItem().toString();
		tIncident.I_zraneni = injury.getSelectedItem().toString();
		tIncident.I_pricina = reason.getSelectedItem().toString();
		tIncident.I_pohlavi = sex.getSelectedItem().toString();			

		// uložení do databáze
		DB.Queries.Incident.insertIncident(bufferToDB, incidentID, tIncident, isEditMode);

		// smazání bufferu obrázků pro uložení do DB
		bufferToDB.clear();	
		setThumbnailsPanel();

		// aktualizuje okno rodiče
		this.parent.searchIncidents();

		// zavři okno po uložení
			this.dispose();	
    }//GEN-LAST:event_jBtnSaveActionPerformed

	/**
	 * Reaguje na stisk tlačítka nahráním obrázku k události.
	 * @param evt předaná událost
	 */
    private void jBtnUploadImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnUploadImgActionPerformed
        // vytvoření, nastavení a zobrazení vybírátka souborů
		File fCurrentDirectory = null;
		JFileChooser fc = new JFileChooser(fCurrentDirectory);
        fc.addChoosableFileFilter(new ImageFilter());
        fc.setAcceptAllFileFilterUsed(false);
        fc.showOpenDialog(this);
		
		// vložení obrázku ze souboru do fronty pro uložení do DB
		bufferToDB.add(fc.getSelectedFile());
		
		// resetování a obnova panelu z náhledy obrázků	
		setThumbnailsPanel();
    }//GEN-LAST:event_jBtnUploadImgActionPerformed

	/**
	 * Reaguje stiknutím tlačítka smazáním události
	 * @param evt předáná událost
	 */
    private void jBtnDelIncidentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnDelIncidentActionPerformed
        String message = "Opravdu chcete smazat incident s ID "+incidentID+"?";
		String title = "Opravdu smazat?";
		
		// potvrzovací dialog
		int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
		if (reply == JOptionPane.YES_OPTION)
		{
			DB.Queries.Incident.deleteIncident(incidentID);
			
			// aktualizuje okno rodiče
			this.parent.searchIncidents();
			this.dispose();		
		}
    }//GEN-LAST:event_jBtnDelIncidentActionPerformed
	/**
	 * Obarví zvolenou stanici na mapě při změně hodnoty comboboxu.
	 * @param evt předaná událost
	 */
    private void stationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stationActionPerformed
        mapSearchViewer1.setFilter(((((MyComboBox)station.getSelectedItem()) == null) ? 0 : ((MyComboBox)station.getSelectedItem()).getValue()));
        try {
            // překreslení mapy
             mapSearchViewer1.loadFilteredStationFromDb();
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        mapSearchViewer1.repaint();
    }//GEN-LAST:event_stationActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

	/**
	 * Nastaví hodnoty polí formuláře položkami z databáze pro možnou
	 * aktualizaci těchto informací a inicializuje panel s náhledy obrázků.
	 * @param incidentID id incidentu z DB
	 * @param parent reference na rodiče modálního okna
	 */
	public void initForUpdate(int incidentID, Search parent)
	{	
		// nastavení příznaku aktualizační režim okna
		isEditMode = true;
		this.parent = parent;
				
		// inicializace ID aktualizovaného incidentu
		this.incidentID = incidentID;
		
		// získání dat z DB
		tIncident = DB.Queries.Incident.getIncident(this.incidentID);
		
		// nastavení jednoduchých hodnot do formulářů z DB
		id.setText(String.valueOf(tIncident.I_id));
		delay.setValue(tIncident.I_zpozdeni);
		age.setValue(tIncident.I_vek);
		description.setText(tIncident.I_popis);
		injury.setSelectedItem(tIncident.I_zraneni);
		event.setSelectedItem(tIncident.I_udalost);
		reason.setSelectedItem(tIncident.I_pricina);
		sex.setSelectedItem(tIncident.I_pohlavi);
		MyComboBox.setSelectedKey(station, tIncident.I_stanice);
		
		// nastavení datepickeru
		try
		{
			// získání data ve vhodém formátu
			Date d = new SimpleDateFormat("dd.MM.yyyy").parse(tIncident.I_dateFrom);
	
			// vytvoření a nastavení kalnedáře
			Calendar c = Calendar.getInstance();
			c.setTime(d);
			
			// nastavení data do datepickeru
			datePicker.getModel().setDate(c.get(Calendar.YEAR), 
										   c.get(Calendar.MONTH), 
										   c.get(Calendar.DAY_OF_MONTH));
			
			datePicker.getModel().setSelected(true);
			
			// vložení datapickeru do formuláře
			date.add(datePicker);
		}
		catch(ParseException e)
		{
			// nikdy nebude vykonáno
		}
		
		// nastaví panel s náhledy obrázků
		setThumbnailsPanel();
	}
	
	/**
	 * Nastaví hodnoty polí formuláře pro přidání nového incidentu.
	 * @param search ukazatel na okno rodiče modálního okna
	 */
	public void initForInsert(Search search)
	{
		this.parent = search;
		
		// skrytí tlačítka smazání
		jBtnDelIncident.hide();
		
		// inicializace struktury hodnot formuláře
		tIncident = new TIncident();
		
		// nastavení příznaku insert režim okna
		isEditMode = false;
		
		// nastavení dnešního data do pole
		Calendar c = Calendar.getInstance();
		int mYear = c.get(Calendar.YEAR);
		int mMonth = c.get(Calendar.MONTH);
		int mDay = c.get(Calendar.DAY_OF_MONTH);

		datePicker.getModel().setDate(mYear, mMonth, mDay);
		datePicker.getModel().setSelected(true);
		
	}
	/**
	 * Přidá náhled obrázku do panelu s obrázky.
	 * @param imgID id obrázku z DB nebo index v bufferu
	 * @param srcIcon vkládaný obrázek
	 * @param isInDB příznak vkládání obrázku z DB nebo souboru
	 */
	private void addThumbnail(final int imgID, final ImageIcon srcIcon, boolean isInDB)
	{
		// zmenšení obrázku na náhled
		ImageIcon dstIcon = getScaledImage(srcIcon, 150, 150);
					
		// kontejner s obrázkem
		JLabel jImgContainer = new JLabel();
		jImgContainer.setIcon(dstIcon);
		jImgContainer.setHorizontalAlignment(JLabel.CENTER);

		// kontejner s obrázkem a tlačítky
		JPanel jImgBtnContainer = new JPanel(new BorderLayout());
		jImgBtnContainer.setPreferredSize(new Dimension(150, 150));
		jImgBtnContainer.add(jImgContainer, BorderLayout.CENTER);

		// kontejner s tlačítky
		JPanel jPanelButtons = new JPanel(new GridLayout(1, 1));

		// tlačítka smazat a rotace
		javax.swing.JButton jButtonDel = new javax.swing.JButton();
		jButtonDel.setIcon(new ImageIcon(getClass().getResource("/cz/vutbr/fit/pdb/project01/Image/delete.png")));
		
		javax.swing.JButton jButtonRot = new javax.swing.JButton();
		jButtonRot.setIcon(new ImageIcon(getClass().getResource("/cz/vutbr/fit/pdb/project01/Image/rotate.png")));
		
		javax.swing.JButton jButtonSimil = new javax.swing.JButton();
		jButtonSimil.setIcon(new ImageIcon(getClass().getResource("/cz/vutbr/fit/pdb/project01/Image/similar-image.png")));
		
		// vložení tlačítek do konteineru s tlačítky
		jPanelButtons.add(jButtonDel);
		jPanelButtons.add(jButtonRot);
		jPanelButtons.add(jButtonSimil);
		
		// obrázky z DB mají zelené pozadí
		if (isInDB)
			jImgBtnContainer.setBackground(Color.decode("#E0F5E6"));
		else
		{
			// obrázky ve frontě pro uložení do DB mají červené pozadí
			jImgBtnContainer.setBackground(Color.decode("#F2DAD9"));
			
			// pro obrázky ve frontě pro uložení do DB zakázat rotaci a vyhl. pod.
			jButtonRot.setEnabled(false);
			jButtonSimil.setEnabled(false);
		}

		// vložení tlačítek do výsledného konteineru
		jImgBtnContainer.add(jPanelButtons, BorderLayout.AFTER_LAST_LINE);
		
		// vložení výsledného kontejneru do GUI
		jPFotos.add(jImgBtnContainer);

		///////////////////////////// listenery ////////////////////////////////
		
		// listener pro zvětšení obrázku
		jImgContainer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				jBtnShowImgClickPerformed(srcIcon);
			}		
		});

		// pro obrázek z DB
		if (isInDB)
		{
			// listener pro mazání obrázku z DB
			jButtonDel.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jDeleteDBImgActionPerformed(imgID); 
				}
			});
			
			// listener pro rotaci obrázku z DB
			jButtonRot.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jRotateDBImgActionPerformed(imgID);
				}
			});
			
			// listener pro vyhledání podobných obrázků v DB
			jButtonSimil.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jSimilImgsActionPerformed(imgID);
				}
			});
		}
		
		// pro obrázek z bufferu pro uložení do DB
		else
		{
			// listener pro mazání obrázku z bufferu pro uložení do DB
			jButtonDel.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jDeleteVectImgActionPerformed(imgID);
				}
			});
		}
	}
	
	/**
	 * Zmenší zadaný obrázek na zadanou maximální velikost.
	 * @param icon zmenšovaný obrázek
	 * @param w maximální nová šířka
	 * @param h maximální nová výška
	 * @return zmenšený obrázek
	 */
	public static ImageIcon getScaledImage(ImageIcon icon, int w, int h)
    {
        int nw = icon.getIconWidth();
        int nh = icon.getIconHeight();

        if(icon.getIconWidth() > w)
        {
			nw = w;
			nh = (nw * icon.getIconHeight()) / icon.getIconWidth();
        }

        if(nh > h)
        {
			nh = h;
			nw = (icon.getIconWidth() * nh) / icon.getIconHeight();
        }

		// převod vstupní imgagicon na image
		Image srcImg = icon.getImage();
		
		// převod na buffered image 
		BufferedImage resizedImg = new BufferedImage(nw, nh, BufferedImage.TYPE_INT_ARGB);
		
		// zmenšení
		Graphics2D g2 = resizedImg.createGraphics();	
		g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		g2.drawImage(srcImg, 0, 0, nw, nh, null);
		g2.dispose();
		return new ImageIcon(resizedImg); 
	}
	
	/**
	 * Vykreslí náhledy obrázků daného incidentu - z DB i z bufferu pro uložení
	 * do DB
	 */
	private void setThumbnailsPanel()
	{				
		// smazání původního obsahu panelu s náhledy
		jPFotos.removeAll();
		
		//////////////////////////// náhledy z DB///////////////////////////////
		// získání statement
		try(OraclePreparedStatement stmt = DB.Queries.Incident.getImagesFromDb(incidentID);) 
		{
			// získání resultSet
			try (OracleResultSet rs = (OracleResultSet)stmt.executeQuery()) 
			{
				// pro každý obrázek v DB
				while (rs.next()) {
					int imgID = rs.getInt("id"); // id obrázku v DB
					
					// získání obrázku z DB
					OrdImage imgProxy = (OrdImage) rs.getORAData("foto", OrdImage.getORADataFactory());
					ImageIcon srcIcon = new ImageIcon(imgProxy.getDataInByteArray());
					
					// přidání obrázku panelu náhledů
					addThumbnail(imgID, srcIcon, true);
				}
			}
			catch (SQLException e)
			{
				System.err.println("Exception setThumbnailsPanel1(): " + e.getMessage());
			}
			catch (Exception e)
			{
				System.err.println("Exception setThumbnailsPanel2(): " + e.getMessage());
			}
		}
		catch (SQLException e)
		{
			System.err.println("Exception setThumbnailsPanel3(): " + e.getMessage());
		}
		
		/////////////////////// náhledy z bufferu pro uloženi do DB/////////////
		
		BufferedImage img;
		// pro každý uživatelem nahraný obrázek
		for (File file : bufferToDB)
		{
			try 
			{
				// přečtení souboru jako obrázku
				img = ImageIO.read(file);

				// přidání obrázku do grafiky
				addThumbnail(bufferToDB.indexOf(file), new ImageIcon(img), false);
			}
			catch (Exception e)
			{
				// soubor nebylo možné zpracovat
			}
		}
		
		// překreslení okna s náhledy obrázků
		jPFotos.revalidate();
		jPFotos.repaint();	
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Incident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				Incident dialog = new Incident(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
						
					}
				});
				dialog.setVisible(true);
			}
		});
	}	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner age;
    private javax.swing.JPanel date;
    private javax.swing.JSpinner delay;
    private javax.swing.JTextArea description;
    private javax.swing.JComboBox<String> event;
    private javax.swing.JTextField id;
    private javax.swing.JComboBox<String> injury;
    private javax.swing.JButton jBtnDelIncident;
    private javax.swing.JButton jBtnSave;
    private javax.swing.JButton jBtnUploadImg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPFotos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollFotos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private GUI.PANELS.MapSearchViewer mapSearchViewer1;
    private javax.swing.JComboBox<String> reason;
    private javax.swing.JComboBox<String> sex;
    private javax.swing.JComboBox<String> station;
    // End of variables declaration//GEN-END:variables
}
