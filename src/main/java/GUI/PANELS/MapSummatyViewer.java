/**
 * Projekt do předmětu PDB (2016/2017) - Prostorové, multimediální a temporální 
 * databáze: Metro Accident Databse
 * Autoři: Petr Staněk (xstane34), 
           František Matečný (xmatec00),
           Jakub Stejskal (xstejs24)
 * Datum:  12.12.2016
 * Verze:  1.0
 */
package GUI.PANELS;

import DB.Objects.DrawPoint;
import DB.Objects.DrawPolygon;
import DB.Objects.DrawRectangle;
import GUI.Main;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import oracle.spatial.geometry.JGeometry;
import static java.lang.Math.abs;


public class MapSummatyViewer extends javax.swing.JPanel {

    private List<DrawPoint> listPoints;
    private List<DrawRectangle> listRectangles;
    private List<DrawPolygon> listPolylines;
    private List<DrawPolygon> listPolygons;
    
	/**
     * Creates new form MapViewer
     */
    public MapSummatyViewer() {
        initComponents();
        listPoints = new ArrayList<>();
        listRectangles = new ArrayList<>();
        listPolylines = new ArrayList<>();
        listPolygons = new ArrayList<>();
        //listPolygons.add(new DrawPolygon());
        

            // load the Shape objects from a db.
        try {
            loadObjectsFromDb(0,0,0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    public void loadObjectsFromDb(int id_S, int id_L, int id_O) {
        
        listPoints.removeAll(listPoints);
        listPolygons.removeAll(listPolygons);
        listPolylines.removeAll(listPolylines);
        listRectangles.removeAll(listRectangles);
        
        String query;
        
        query = DB.Queries.Spatial.getGeometry(id_O, 2);
//        System.out.println(query);
        try (Statement stmt = Main.db.getConnection().createStatement())
        { 
            try (ResultSet rs = stmt.executeQuery(query))
            {
                while (rs.next()) {
                    byte[] image = rs.getBytes("geometrie");
                    String color = rs.getString("barva");
                    String name = rs.getString("nazev");
                    int id = rs.getInt("id");
                    JGeometry jGeometry = JGeometry.load(image);
                    jGeometry2FilteredDrawObject(jGeometry, rs.getString(6), id, name, color);
                }

            }
        } catch (SQLException sqlEx) {
                System.err.println("SQLException (loadShapesFromDb()-obvod): " + sqlEx.getMessage());
        }
        catch (Exception sqlEx) {}

        query = DB.Queries.Spatial.getGeometry(id_L, 3);
        try (Statement stmt = Main.db.getConnection().createStatement())
        { 
            try (ResultSet rs = stmt.executeQuery(query))
            {
                while (rs.next()) {
                    byte[] image = rs.getBytes("geometrie");
                    String color = rs.getString("barva");
                    String name = rs.getString("nazev");
                    int id = rs.getInt("id");
                    JGeometry jGeometry = JGeometry.load(image);
                    jGeometry2FilteredDrawObject(jGeometry, rs.getString(6), id, name, color);
                }

            }
        } catch (SQLException sqlEx) {
                System.err.println("SQLException (loadShapesFromDb()-linka): " + sqlEx.getMessage());
        }
                        catch (Exception sqlEx) {

                        }

        query = DB.Queries.Spatial.getGeometry(id_S, 4);
        try (Statement stmt = Main.db.getConnection().createStatement())
        { 
            try (ResultSet rs = stmt.executeQuery(query))
            {
                while (rs.next()) {
                    byte[] image = rs.getBytes("geometrie");
                    String color = rs.getString("barva");;
                    String name = rs.getString("nazev");
                    int id = rs.getInt("id");
                    JGeometry jGeometry = JGeometry.load(image);
                    jGeometry2FilteredDrawObject(jGeometry, null, id, name, color); 
                }
            }
        } catch (SQLException sqlEx) {
                System.err.println("SQLException (loadShapesFromDb()-stanice): " + sqlEx.getMessage());
        }
        catch (Exception sqlEx) {}
    }

    public void jGeometry2FilteredDrawObject(JGeometry jGeometry,  String str, int id, String name, String color) {
        // check a type of JGeometry object
        switch (jGeometry.getType()) {
            // it is a polygon
            case JGeometry.GTYPE_POLYGON:
                            str = str.replace("POLYGON", " ");
                            str = str.replace("(", "");
                            str = str.replace(")", "");
                            str = str.replace(" ", ",");
                            str = str.replace(",,", ",");
                            String[] parts = str.split(",");
                            double[] array = new double[parts.length-3];
                            for (int i = 0; i < parts.length-3; i++) {
                                array[i] = Double.parseDouble(parts[i+1]);
                            }
                        if(jGeometry.isRectangle()){
                           listRectangles.add(new DrawRectangle((int) array[0], (int) array[1], (int) abs(array[0] - array[4]), (int) abs(array[1] - array[5])));
                           listRectangles.get(listRectangles.size()-1).id = id;
                           listRectangles.get(listRectangles.size()-1).name = name;
                           listRectangles.get(listRectangles.size()-1).color = Color.decode(color);
                        }
                        else{
                            listPolygons.add(new DrawPolygon());
                            for (int i = 0; i < array.length; i+=2) {
                                listPolygons.get(listPolygons.size()-1).addPoint((int) array[i], (int) array[i+1]);
                            }
                            listPolygons.get(listPolygons.size()-1).id = id;
                            listPolygons.get(listPolygons.size()-1).name = name;
                            listPolygons.get(listPolygons.size()-1).color = Color.decode(color);
                        }
                break;
                
            case JGeometry.GTYPE_CURVE:
				str = str.replace("POLYGON", " ");
				str = str.replace("(", "");
				str = str.replace(")", "");
				str = str.replace(" ", ",");
				str = str.replace(",,", ",");
				String[] parts1 = str.split(",");
				double[] array1 = new double[parts1.length-1];

				for (int i = 0; i < parts1.length-1; i++) {
					array1[i] = Double.parseDouble(parts1[i+1]);
				}

				listPolylines.add(new DrawPolygon());
				for (int i = 0; i < array1.length; i+=2) {
					listPolylines.get(listPolylines.size()-1).addPoint((int) array1[i], (int) array1[i+1]);
				}
				listPolylines.get(listPolylines.size()-1).id = id;
				listPolylines.get(listPolylines.size()-1).name = name;
				listPolylines.get(listPolylines.size()-1).color = Color.decode(color);
				break; 
               
            case JGeometry.GTYPE_POINT:
				listPoints.add(new DrawPoint());
				listPoints.get(listPoints.size()-1).p2d = jGeometry.getJavaPoint();
				listPoints.get(listPoints.size()-1).id = id;
				listPoints.get(listPoints.size()-1).name = name;
				listPoints.get(listPoints.size()-1).color = Color.decode(color);
				break;
            // it is something else (we do not know how to convert)
            default:
                System.err.println("neznami typ geometrie: " + jGeometry.getType());     
        }
    }
    
 
    
    @Override
    public void paint(Graphics gg) {
        super.paint(gg);

        // a canvas of the Graphics context
        Graphics2D g = (Graphics2D) gg;
        g.scale(0.54, 0.54);

// vykresli celu mapu
        for (DrawPolygon p : Main.spacialObjects.listPolygons) {
            g.setPaint(Color.decode("#eee9e9"));
            g.fillPolygon(p.xpoints, p.ypoints, p.npoints);
            g.setPaint(Color.DARK_GRAY);
            g.drawPolygon(p.xpoints, p.ypoints, p.npoints); 
        }
        
        
        for (DrawRectangle p : Main.spacialObjects.listRectangles) {
            g.setPaint(Color.decode("#eee9e9"));
            g.fillRect(p.x, p.y, p.width, p.height);
            g.setPaint(Color.DARK_GRAY);
            g.drawRect(p.x, p.y, p.width, p.height);
        }
        
        g.setStroke(new BasicStroke(3));
        g.setPaint(Color.GRAY);
        for (DrawPolygon p : Main.spacialObjects.listPolylines) {
            g.drawPolyline(p.xpoints, p.ypoints, p.npoints);
        }
        
        g.setStroke(new BasicStroke(1));
        for (DrawPoint p : Main.spacialObjects.listPoints) {
            g.setPaint(Color.GRAY);
            g.fillOval((int)p.p2d.getX()-4, (int) p.p2d.getY()-4, 8, 8);
            g.setPaint(Color.BLACK);
            g.drawOval((int)p.p2d.getX()-4, (int) p.p2d.getY()-4, 8, 8);
            
        }
        
//zvyrazni mapove casti   
        g.setStroke(new BasicStroke(5));
        g.setPaint(Color.RED);
        for (DrawPolygon p : listPolygons) {
            g.drawPolygon(p.xpoints, p.ypoints, p.npoints);
        }
        
        for (DrawRectangle p : listRectangles) {
            g.drawRect(p.x, p.y, p.width, p.height);
        }
        
        for (DrawPolygon p : listPolylines) {
            g.drawPolyline(p.xpoints, p.ypoints, p.npoints);
        }
        
        g.setStroke(new BasicStroke(1));
        for (DrawPoint p : listPoints) {
            g.fillOval((int)p.p2d.getX()-6, (int) p.p2d.getY()-6, 12, 12);
        }
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
